{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a SiPeKa Docs","text":"<p>SiPeKa es un sistema integral para la gesti\u00f3n de planillas, asistencias y sueldos, dise\u00f1ado especialmente para empresas peque\u00f1as. La plataforma permite administrar de forma eficiente los datos de empleados, registrar asistencias y calcular remuneraciones, simplificando el proceso de generaci\u00f3n del archivo .csv requerido por el Sistema de Planilla \u00danica.</p>"},{"location":"#entorno-de-desarrollo","title":"Entorno de desarrollo","text":"<ul> <li>FrontEnd: React.js, Vite, Redux Toolkit, TailwindCSS, ApexCharts, Framer Motion, i18next</li> <li>BackEnd: Node.js, Express.js, Sequelize ORM, JWT, Argon2, MySQL</li> <li>Base de datos: MySQL</li> <li>Quality Assurance: Docker, GitHub, Postman, Jest, GitHub Actions</li> </ul>"},{"location":"#estructura-del-proyecto","title":"Estructura del proyecto","text":"<pre><code>mern-employee-salary-management\n\u251c\u2500\u2500 Backend\n\u2502   \u251c\u2500\u2500 config                  # Configuraciones generales (DB, sesiones, etc.)\n\u2502   \u251c\u2500\u2500 controllers             # Controladores de rutas del backend\n\u2502   \u251c\u2500\u2500 db\n\u2502   \u2502   \u251c\u2500\u2500 db_penggajian3.sql     # Estructura inicial de la base de datos\n\u2502   \u2502   \u251c\u2500\u2500 db_scripts.sql         # Scripts de carga y pruebas\n\u2502   \u2502   \u2514\u2500\u2500 db_scripts_2.sql       # Scripts complementarios adicionales\n\u2502   \u251c\u2500\u2500 middleware              # Validaciones, autenticaciones, errores\n\u2502   \u251c\u2500\u2500 models                  # Modelos Sequelize para conexi\u00f3n MySQL\n\u2502   \u251c\u2500\u2500 routes                  # Definici\u00f3n de endpoints de la API REST\n\u2502   \u251c\u2500\u2500 .env.example            # Archivo ejemplo para variables de entorno\n\u2502   \u2514\u2500\u2500 server.js               # Punto de entrada del backend\n\u2502\n\u251c\u2500\u2500 Frontend\n\u2502   \u251c\u2500\u2500 public                  # Recursos est\u00e1ticos (favicon, etc.)\n\u2502   \u251c\u2500\u2500 src\n\u2502   \u2502   \u251c\u2500\u2500 components          # Botones, tarjetas, gr\u00e1ficas, tablas, etc.\n\u2502   \u2502   \u251c\u2500\u2500 pages               # P\u00e1ginas: empleados, deducciones, asistencias\n\u2502   \u2502   \u251c\u2500\u2500 layouts             # Plantillas base con sidebar/topbar\n\u2502   \u2502   \u251c\u2500\u2500 hooks               # Hooks personalizados para l\u00f3gica com\u00fan\n\u2502   \u2502   \u251c\u2500\u2500 store               # Redux Toolkit (slices y store)\n\u2502   \u2502   \u251c\u2500\u2500 locales             # Archivos de traducci\u00f3n (i18n)\n\u2502   \u2502   \u251c\u2500\u2500 App.jsx             # Enrutamiento general del frontend\n\u2502   \u2502   \u2514\u2500\u2500 main.jsx            # Punto de arranque de la app React\n\u2502   \u251c\u2500\u2500 .env.example            # Variables de entorno del frontend\n\u2502   \u2514\u2500\u2500 vite.config.js          # Configuraci\u00f3n de Vite para desarrollo\n\u2502\n\u251c\u2500\u2500 README.md                  # Descripci\u00f3n general del proyecto\n\u2514\u2500\u2500 INSTALATION.md             # Gu\u00eda t\u00e9cnica de instalaci\u00f3n\n</code></pre>"},{"location":"manuales/api-rest/","title":"Manual y Testing de API rest","text":"<p>Swagger es una herramienta que permite visualizar, probar y comprender de forma interactiva los endpoints de la API REST de SiPeKa. Gracias a esta interfaz, cualquier desarrollador puede consultar las rutas disponibles, los par\u00e1metros requeridos, los tipos de respuesta y los posibles c\u00f3digos de error sin necesidad de herramientas externas como Postman.</p>"},{"location":"manuales/api-rest/#que-puedes-hacer-desde-swagger","title":"\u00bfQu\u00e9 puedes hacer desde Swagger?","text":"<ul> <li>Consultar los endpoints disponibles y su prop\u00f3sito.</li> <li>Ver los m\u00e9todos HTTP utilizados (GET, POST, PUT, DELETE).</li> <li>Probar directamente la API desde el navegador.</li> <li>Enviar par\u00e1metros de prueba y observar las respuestas en tiempo real.</li> <li>Ver ejemplos de respuestas con estructura JSON.</li> <li>Conocer los c\u00f3digos de estado HTTP posibles para cada petici\u00f3n.</li> </ul> <p>Manual de API </p> <p></p>"},{"location":"manuales/devops/","title":"Manual de instalaci\u00f3n DevOps","text":"<p>Este manual describe el proceso de integraci\u00f3n y despliegue continuo (CI/CD) del sistema SiPeKa (Sistema de Planillas para Empleados) y como instalarlo, detallando el uso de contenedores Docker, GitHub Actions para automatizaci\u00f3n, y Google Cloud Platform como infraestructura de ejecuci\u00f3n y persistencia de datos. El objetivo es garantizar un flujo de trabajo moderno, automatizado y confiable.</p> <p>Manual de instalaci\u00f3n DevOps</p>"},{"location":"manuales/devops/#herramientas-devops","title":"Herramientas DevOps","text":"Herramienta Funci\u00f3n GitHub Actions CI/CD para pruebas, construcci\u00f3n y despliegue Docker Contenerizaci\u00f3n de backend y frontend Docker Hub Registro remoto de im\u00e1genes p\u00fablicas del sistema Google Cloud Run Despliegue administrado y escalable de servicios Docker Google Cloud SQL Almacenamiento persistente con MySQL, accesible desde Cloud Run"},{"location":"manuales/manual-tecnico/","title":"Manual T\u00e9cnico","text":"<p>El sistema SiPeKa (Sistema de Planillas para Empleados) es una plataforma basada en el stack MERN (adaptado a MySQL) para la gesti\u00f3n de n\u00f3mina de empleados. Esta versi\u00f3n prototipo forma parte de un proyecto acad\u00e9mico enfocado en instituciones p\u00fablicas de El Salvador, con funcionalidades clave como el c\u00e1lculo salarial, autenticaci\u00f3n por roles, y exportaci\u00f3n de reportes.</p>"},{"location":"manuales/manual-tecnico/#arquitectura-del-proyecto","title":"Arquitectura del proyecto","text":"<p>El sistema SiPeKa ha sido desarrollado utilizando una arquitectura basada en el stack MERN adaptado a bases de datos relacionales (MySQL). La soluci\u00f3n est\u00e1 preparada para su despliegue en la nube, empleando servicios de Google Cloud como Cloud Run, Cloud CDN y Cloud DNS.</p> <p>Para consultas de como utilizar los instalar y ejecutar localmente el sistema, consultar el siguiente manual t\u00e9cnico:  </p> <p>Manual T\u00e9cnico</p>"},{"location":"manuales/manual-tecnico/#requisitos-del-sistema","title":"Requisitos del sistema","text":""},{"location":"manuales/manual-tecnico/#software","title":"Software","text":"<ul> <li>Node.js (v18 o superior)</li> <li>MySQL (v8 o superior)</li> <li>Git</li> <li>Visual Studio Code</li> <li>Navegador moderno (Chrome, Firefox)</li> </ul>"},{"location":"manuales/manual-tecnico/#hardware","title":"Hardware","text":"<ul> <li>Procesador: Intel i5 o equivalente</li> <li>RAM: 8GB</li> <li>Almacenamiento libre: 512MB para entorno de desarrollo</li> </ul>"},{"location":"manuales/manual-usuario/","title":"Manual de Usuario","text":"<p>Esta gu\u00eda ayuda al usuario en el uso del sistema  SiPeKa (Sistema de Planillas para Empleados), una plataforma de gesti\u00f3n de planillas orientada a instituciones p\u00fablicas. Actualmente se incluyen m\u00f3dulos funcionales para empleados, cargos, deducciones, asistencias, c\u00e1lculo de sueldos y funciones adicionales, como exportaci\u00f3n de datos e internacionalizaci\u00f3n.</p>"},{"location":"manuales/manual-usuario/#credenciales-por-defecto-del-sistema","title":"Credenciales por defecto del sistema","text":"Usuario Contrase\u00f1a Rol user pass Administrador julian pass Empleado"},{"location":"manuales/manual-usuario/#modulos-del-sistema","title":"M\u00f3dulos del sistema","text":"<ul> <li>Empleados</li> <li>Puestos</li> <li>Deducciones</li> <li>Asistencias</li> <li>Sueldos</li> <li>Cambio de idioma</li> <li>Cambio de moneda</li> <li>Exportaci\u00f3n de datos</li> </ul> <p>Para consultas de como utilizar los distints modulos del sistema, consultar el siguiente manual de uso:  </p> <p>Manual de usuario</p>"},{"location":"testing/intro-test/","title":"Testing y QA","text":"<p>El proceso de QA y Testing asegura que el sistema sea funcional, fiable y libre de errores. Se han implementado pruebas unitarias, de integraci\u00f3n y de extremo a extremo para verificar cada parte del proyecto, tanto en frontend como en backend. Adem\u00e1s, se utiliza Integraci\u00f3n Continua (CI/CD) para automatizar las pruebas y asegurar que los cambios no afecten el rendimiento del sistema. Este enfoque integral garantiza que el software cumpla con los est\u00e1ndares de calidad en cada etapa del desarrollo.</p> Prueba Herramientas Implementaci\u00f3n Pruebas Unitarias Jest Se implementar\u00e1n pruebas unitarias con Jest para verificar el comportamiento correcto de funciones clave. Estas pruebas se ejecutan autom\u00e1ticamente cada vez que se hace un commit, asegurando que los cambios no introduzcan errores. Pruebas de Integraci\u00f3n Postman Se verifica la interacci\u00f3n entre los diferentes componentes (API, base de datos, frontend). Postman ayuda a simular peticiones HTTP y evaluar las respuestas esperadas en tiempo real. Integraci\u00f3n Continua (CI/CD) GitHub Actions Configuraci\u00f3n de un pipeline b\u00e1sico de GitHub Actions para ejecutar autom\u00e1ticamente las pruebas automatizadas en cada push a la rama principal. Esto garantiza que los errores se detecten en etapas tempranas del desarrollo. <p>Para consultar la gu\u00eda completa sobre como implementar los tests, dirigase al siguiente enlace:</p> <p>Implementaci\u00f3n de Testing y QA</p>"}]}