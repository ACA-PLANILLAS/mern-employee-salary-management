name: Backend CI/CD

on:
  push:
    branches: [main, uat]
    paths:
      - "Backend/**"
      - ".github/workflows/deploy-backend.yml"

jobs:
  test-backend:
    name: ðŸ§ª Test Backend with Local MySQL
    runs-on: ubuntu-latest

    permissions:
      checks: write
      contents: read

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.14.0

      - name: Install dependencies
        run: |
          cd Backend
          npm install

      - name: Run Jest tests (using local DB)
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_DIALECT: mysql
        run: |
          cd Backend
          npm run test_module || echo "Tests failed, skipping build"

      - name: Upload Jest test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jest-report
          path: Backend/reports/jest-junit.xml

      - name: Report test results in GitHub
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Backend Jest Tests
          path: Backend/reports/jest-junit.xml
          reporter: jest-junit

  deploy-prod-backend:
    name: ðŸš€ Deploy Backend to Cloud Run (Production)
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build \
            -t docker.io/${{ secrets.DOCKER_USERNAME }}/mern-backend:latest \
            Backend

      - name: Push Docker image
        run: |
          docker push docker.io/${{ secrets.DOCKER_USERNAME }}/mern-backend:latest

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_KEY_JSON }}

      - name: Deploy to Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: mern-backend-prod
          image: docker.io/${{ secrets.DOCKER_USERNAME }}/mern-backend:latest
          region: us-central1
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          cloudsql-instances: ${{ secrets.DB_SOCKET }}
          env_vars: |
            NODE_ENV=production
            DB_SOCKET=/cloudsql/${{ secrets.DB_SOCKET }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_DIALECT=${{ secrets.DB_DIALECT }}
            SESS_SECRET= ${{ secrets.SESS_SECRET }}
